#!/bin/bash
 
# =======================
# Define Colors
RED='\e[41m'
BLUE='\e[44m'
ORANGE='\e[46m'
NC='\e[0m' # No color
BG='\e[7m' # Highlighting Background color
TC='\e[1m' # Highlighting Text color

# =======================
# Service messages section
# Wrong Option
ERRORMSG="$RED Wrong option $NC"
TRYAGAINMSG=" Please try again..."
# File Manager (Ranger)
#INSTALLINGRNG1MSG="Installing ranger to manage files"
#CLIFMNOTINSTMSG="No cli filemanager is installed and Apt seems to be in use"
# Task Manager (bashtop)
INSTALLINGTASKMANMSG="Installing htop to manage tasks"
TASKMANNOTINSTMSG="Htop is not installed and Apt seems to be in use"
# File Search (Rifle)
RIFLENOTINSTMSG="Rifle is not installed and Apt seems to be in use"
# Web Browser (Links)
#INSTALLINGCLIBRWOSMSG="Installing links to surf the web"
#CLIBROWSNOTINSTMSG="No cli browser installed and  seems to be in use"
# Web Brouser (w3m)
#CLIBROWSW3MTMSG="Shift + u: Enter new address. q: Exit"
# 
UPDATEMSG="Update packages"
# inxi
INSTALLINGINXIMSG="Installing inxi to display system information"
INXINOTINSTMSG="inxi is not installed and Apt seems to be in use"
# cpupower
INSTALLINGCPUPOWERMSG="Installing cpupower to display frequency-info"
CPUPOWERNOTINSTMSG="cpupower is not installed and Apt seems to be in use"
# cmus
#INSTALLINGCMUSMSG="Installing cmus to play music"
#CMUSNOTINSTMSG="cmus is not installed and Apt seems to be in use"
# ncdu
INSTALLINGNCDUMSG="Installing ncdu to disk usage"
NCDUNOTINSTMSG="ncdu is not installed and Apt seems to be in use"


# =======================
# Main Menu functions
# 
#upgrade_and_update
function upgrade {
	if [ -e /usr/bin/apt ] # If file exists
	then
		echo "------------" 
		echo -e "$BLUE $UPDATEMSG $NC" 
		echo "------------" 

		if [ $(ps aux | grep apt | wc -l) -gt 1 ]   
		then
			echo -e " $RED Apt is used. To return to ToolBox press ENTER $NC"
            read -r
		else
		sudo apt update && sudo apt full-upgrade -y # Run it
		echo -e " $BLUE Packages update. To return to ToolBox press ENTER $NC"
        read -r
		fi
    fi
}

# System Information
function sysinfo {
	if [ -e /usr/bin/inxi ]
	then
		sudo inxi -v8 | tee .inxi.txt &>/dev/null
		printf '\33[H\33[2J'
		< .inxi.txt fzf -i --multi --reverse --inline-info --prompt="Enter string > " --header="TAB key to (un)select. ENTER to view selection. ESC to quit. " # --no-unicode
		rm -rf .inxi.txt
	else
		echo "$INSTALLINGINXIMSG"
		echo "$INXINOTINSTMSG"
		sudo apt install inxi fzf -y inxi && inxi -v8 | fzf -i --multi --reverse --info=inline --prompt="Enter string > " --header="TAB key to (un)select. ENTER to view selection. ESC to quit. " # --no-unicode
    fi
}

#ncdu
function disk_usage() {
	if [ -e /usr/bin/ncdu ]
	then
		sudo ncdu -x /
        ncdu 
	else
		echo "$INSTALLINGNCDUMSG"
		echo "$NCDUNOTINSTMSG"
		sudo apt install ncdu && ncdu
    fi
}

# File Manager
#function cli_filemanager {
#	if [ -e /usr/bin/ranger ]
#	then
#		echo -e " $RED Press $BG Q $NC$RED to return to ToolBox $NC"
#		sleep 1
#		ranger
#	elif [ -e /usr/bin/mc ]
#	then
#		mc
#	else		
#		echo "$CLIFMNOTINSTMSG"
#		sudo apt install -y ranger && ranger
#    fi
#}

# Web Browser
#function cli_browser {
#	if [ -e /usr/bin/links ]
#	then
#		links
#	elif [ -e /usr/bin/elinks ]
#	then
#		elinks
#	elif [ -e /usr/bin/w3m ]
#	then
#        echo "$CLIBROWSW3MTMSG"
#        sleep 2
#		w3m -v
#	elif [ -e /usr/bin/lynx ]
#	then
#		lynx
#	else
#        echo "$INSTALLINGCLIBRWOSMSG"		
#		echo "$CLIBROWSNOTINSTMSG"		
#		sudo apt install -y links && links		
#	fi
#}

# File Search
function file_finder {
	if [ -e /usr/bin/rifle ]
	then
		rifle "$(find -type f | fzf -e --reverse --prompt="Enter string > " --header="ESC to quit. ")"
	else
		echo "$INSTALLINGRNG1MSG"		
		echo "$RIFLENOTINSTMSG"			
		sudo apt install fzf ranger -y && rifle "$(find -type f | fzf -e --reverse --prompt="Enter string > " --header="ESC to quit. ")"		
	fi
}

# Taskmanager
function taskmanager {
	if [ -e /usr/bin/htop ]
	then
		htop
	else
		echo "$INSTALLINGTASKMANMSG"
		echo "$TASKMANNOTINSTMSG"
		sudo apt install htop -y && htop
    fi
}


# Cpupower frequency-info
#function freqinfo() {
#  if [ -e /usr/bin/cpupower ]
#  then
#    cpupower frequency-info
#    echo
#    echo -e " $RED Displaying frequency-info. To return to ToolBox press ENTER $NC"
#    read -r
#  else
#    echo "$INSTALLINGCPUPOWERMSG"
#    if [ -e /var/lib/Apt/db.lck ]
#    then
#      echo "$CPUPOWERNOTINSTMSG"
#    else
#    	sudo apt install linux-cpupower && cpupower frequency-info
#      echo
#      echo -e " $RED Displaying frequency-info. To return to ToolBox press ENTER $NC"
#      read -r
#    fi
#  fi
#}

# Music Player
#function music() {
#	if [ -e /usr/bin/cmus ]
#	then
#		echo -e " $RED Press $BG 1-7 $NC$RED to navigate and $BG Q $NC$RED to return to ToolBox $NC"
#		sleep 3
#		cmus
#	else
#		echo "$INSTALLINGCMUSMSG"
#		echo "$CMUSNOTINSTMSG"
#		sudo apt install cmus && cmus
#    fi
#}



# Check if a website is up via https://isitup.org/
function geturl() {
  curl -sL https://isitup.org/"$uservar" | grep data-text= | cut -c 19- | rev | cut -c 11- | rev
}

function isitup() {
  echo -e "Please type in the URL and press ENTER"
  echo -e "For example: \e[7mduckduckgo.com\e[0m"
  read -p 'URL: ' uservar
  echo ""
  echo -e "\e[1m $(geturl) \e[0m"
  echo ""
}

# Random Funny Message
function randArrayElement() {
  arr=(" $RED Nice $BG Try $NC" " $RED Nope! $NC" " $RED Challange $BG Accepted $NC" " $RED Ha $BG Ha! $NC" " $RED You $BG Funny $NC" " $RED Really? $NC" " $RED I Love $BG FOSS $NC" " $RED You're the $BG Boss $NC" "$BG$TC T $NC$BG$TC O $NC$BG$TC O $NC$BG$TC L $NC $BG B $NC $BG O $NC $BG X $NC")
  echo -e "${arr["$((RANDOM % ${#arr[@]}))"]}"
}


# =======================
# Main UI code is below
#
function main {
# Define Menu entries which will be run with the echo command
E0="\e[1mQ\e[0muit"
E1="\e[1mP\e[0mackage update"
E2="System \e[1mI\e[0mnformation"
E3="\e[1mD\e[0misk Usage"
E4="File \e[1mS\e[0mearch"
E5="System & Settings"
E6="Translate Shel\e[1ml\e[0m"
E7="\e[1mT\e[0mask Manager"
E8="Website Status Check"


# Run infinite loop for UI / menu, till the user quits using the "quit" option or CTRL+C.
while true
do

    printf '\33[H\33[2J' # Use this instead of the clear command

    echo
    echo -e "                 $BG$TC C $NC$BG$TC O $NC$BG$TC N $NC$BG$TC T $NC$BG$TC R $NC$BG$TC O $NC$BG$TC L $NC $BG C $NC $BG L $NC $BG I $NC"
    echo -e " $TC+----------------------------------------------------------------+$NC"
    echo -e " $TC|$NC    $BG 1 $NC $E1          $TC|$NC    $BG 2 $NC $E2     $TC|$NC"
    echo -e " $TC|$NC--------------------------------$TC|$NC-------------------------------$TC|$NC"
    echo -e " $TC|$NC    $BG 3 $NC $E3              $TC|$NC    $BG 4 $NC $E4            $TC|$NC"
    echo -e " $TC|$NC--------------------------------$TC|$NC-------------------------------$TC|$NC"
    echo -e " $TC|$NC    $BG 5 $NC $E5       $TC|$NC    $BG 6 $NC $E6        $TC|$NC"
    echo -e " $TC|$NC--------------------------------$TC|$NC-------------------------------$TC|$NC"
    echo -e " $TC|$NC    $BG 7 $NC $E7            $TC|$NC    $BG 8 $NC $E8   $TC|$NC"
    echo -e " $TC+----------------------------------------------------------------+$NC"
    echo ""
    echo -e "  Enter marked number or letter   -    $BG 0 $NC $E0 "

    # save entered number/letter in variable "choice"
    read -r -n 1 -e choice

    # test, whether "choice" fits any of the following numbers or letters
    case "$choice" in

		1|P|p )
            upgrade
            ;;
        2|I|i )
            printf '\33[H\33[2J'
            sysinfo
            echo
            echo -e " $RED Displaying System Information. To return to ToolBox press ENTER $NC"
            # wait for input, e.g. by pressing ENTER:
            read -r
            ;;
        3|H|h )
            printf '\33[H\33[2J'
            disk_usage
            echo
            echo -e " $RED To return to ToolBox press ENTER $NC"
            # wait for input, e.g. by pressing ENTER:
            read -r
            ;;
        4|F|f )
            printf '\33[H\33[2J'
            cd
            file_finder
            echo
            ;;
        5|W|w )
            printf '\33[H\33[2J'
            ~/Documentos/shell/toolbox/bin/system-menu
            ;;
		6|S|s )
            printf '\33[H\33[2J'
            gawk -f <(curl -Ls git.io/translate) -- -shell
            ;;
        7|T|t )
            printf '\33[H\33[2J'
            taskmanager
            ;;
        8|U|u )
            printf '\33[H\33[2J'
            isitup
            echo
            echo -e " $RED Displaying Website Status Check. To return to ToolBox press ENTER $NC"
            read -r
            ;;   
        + )
            printf '\33[H\33[2J'
            randArrayElement "ARRAYISO[@]"
            sleep 1
            ;;
        0|Q|q )
            printf '\33[H\33[2J' && exit
            ;;
        * ) # do this, if $choice variable contains anything else not offered above
            echo -e "$ERRORMSG"
            echo -e "$TRYAGAINMSG"
            sleep 2
            ;;

    esac # close case-loop


done # close while-loop
}
main
